class Solution {
public:
    bool isValid(string s1 , string s2){
        if(s1.size() != s2.size()){
            return false;
        }
        int count = 1;
        int i = 0;
        while(i < s1.size() ){
            if(s1.at(i) != s2.at(i) ){
                count++;
            }
            i++;
        }
        
        if(count > 1){
            return false;
        }
        return true;
        
    }
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        int n = wordList.size();
        
        vector<int> vis(n , false);
        
        queue<string> que;
        que.push(beginWord);
        
        int level = 1;
        while(que.size()){
            int size = que.size();
            
            while(size--){
                
                string rem = que.front();
                que.pop();
                
                for(int i = 0; i < wordList.size() ; i++){
                    
                    
                    
                    if(isValid( rem , wordList[i] )  && !vis[i] ){
                        if(wordList[i] == endWord){
                            return level;
                        }
                        vis[i] = true;
                        que.push(wordList[i]);
                    }
                }
            }
            level++;
                
        }
        return 0;
        
        
    }
};
