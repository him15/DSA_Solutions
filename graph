 vector<int> kahans(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> indegree(graph.size() , 0);
        for(int i = 0; i < graph.size() ; i++){
            for(int nbr = graph[i]){
                indegree[nbr]++;
            }
        }
        
        queue<int> que;
        for(int i = 0; i < n ; i++){
            if(indegree[i] == 0){
                que.push(i);
            }
        }
        
        vector<int> ans;
        while(que.size() > 0){
            int u = que.front();
            que.pop();
            ans.push_back(u);
            
            for(int v : graph[u]){
                indegree[v]--;
                if(indegree[v] == 0){
                    que.push(v);
                }
            }
        }
        
        if(ans.size() < n ){
            cout << "cycle\n"
        }
        else{
            return ans;
        }
        
    }
};
